// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: chess.proto

#include "chess.pb.h"

#include <algorithm>

#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/extension_set.h>
#include <google/protobuf/wire_format_lite.h>
#include <google/protobuf/descriptor.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/reflection_ops.h>
#include <google/protobuf/wire_format.h>
// @@protoc_insertion_point(includes)
#include <google/protobuf/port_def.inc>

PROTOBUF_PRAGMA_INIT_SEG

namespace _pb = ::PROTOBUF_NAMESPACE_ID;
namespace _pbi = _pb::internal;

namespace chess {
PROTOBUF_CONSTEXPR board::board(
    ::_pbi::ConstantInitialized)
  : piece_()
  , turn_(0){}
struct boardDefaultTypeInternal {
  PROTOBUF_CONSTEXPR boardDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~boardDefaultTypeInternal() {}
  union {
    board _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 boardDefaultTypeInternal _board_default_instance_;
}  // namespace chess
static ::_pb::Metadata file_level_metadata_chess_2eproto[1];
static constexpr ::_pb::EnumDescriptor const** file_level_enum_descriptors_chess_2eproto = nullptr;
static constexpr ::_pb::ServiceDescriptor const** file_level_service_descriptors_chess_2eproto = nullptr;

const uint32_t TableStruct_chess_2eproto::offsets[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) = {
  PROTOBUF_FIELD_OFFSET(::chess::board, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::chess::board, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::chess::board, piece_),
  PROTOBUF_FIELD_OFFSET(::chess::board, turn_),
  ~0u,
  0,
};
static const ::_pbi::MigrationSchema schemas[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) = {
  { 0, 8, -1, sizeof(::chess::board)},
};

static const ::_pb::Message* const file_default_instances[] = {
  &::chess::_board_default_instance_._instance,
};

const char descriptor_table_protodef_chess_2eproto[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) =
  "\n\013chess.proto\022\005chess\"2\n\005board\022\r\n\005piece\030\001"
  " \003(\t\022\021\n\004turn\030\002 \001(\005H\000\210\001\001B\007\n\005_turnb\006proto3"
  ;
static ::_pbi::once_flag descriptor_table_chess_2eproto_once;
const ::_pbi::DescriptorTable descriptor_table_chess_2eproto = {
    false, false, 80, descriptor_table_protodef_chess_2eproto,
    "chess.proto",
    &descriptor_table_chess_2eproto_once, nullptr, 0, 1,
    schemas, file_default_instances, TableStruct_chess_2eproto::offsets,
    file_level_metadata_chess_2eproto, file_level_enum_descriptors_chess_2eproto,
    file_level_service_descriptors_chess_2eproto,
};
PROTOBUF_ATTRIBUTE_WEAK const ::_pbi::DescriptorTable* descriptor_table_chess_2eproto_getter() {
  return &descriptor_table_chess_2eproto;
}

// Force running AddDescriptors() at dynamic initialization time.
PROTOBUF_ATTRIBUTE_INIT_PRIORITY2 static ::_pbi::AddDescriptorsRunner dynamic_init_dummy_chess_2eproto(&descriptor_table_chess_2eproto);
namespace chess {

// ===================================================================

class board::_Internal {
 public:
  using HasBits = decltype(std::declval<board>()._has_bits_);
  static void set_has_turn(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
};

board::board(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned),
  piece_(arena) {
  SharedCtor();
  // @@protoc_insertion_point(arena_constructor:chess.board)
}
board::board(const board& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _has_bits_(from._has_bits_),
      piece_(from.piece_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  turn_ = from.turn_;
  // @@protoc_insertion_point(copy_constructor:chess.board)
}

inline void board::SharedCtor() {
turn_ = 0;
}

board::~board() {
  // @@protoc_insertion_point(destructor:chess.board)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void board::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
}

void board::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void board::Clear() {
// @@protoc_insertion_point(message_clear_start:chess.board)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  piece_.Clear();
  turn_ = 0;
  _has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* board::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // repeated string piece = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 10)) {
          ptr -= 1;
          do {
            ptr += 1;
            auto str = _internal_add_piece();
            ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
            CHK_(ptr);
            CHK_(::_pbi::VerifyUTF8(str, "chess.board.piece"));
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<10>(ptr));
        } else
          goto handle_unusual;
        continue;
      // optional int32 turn = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 16)) {
          _Internal::set_has_turn(&has_bits);
          turn_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  _has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* board::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:chess.board)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // repeated string piece = 1;
  for (int i = 0, n = this->_internal_piece_size(); i < n; i++) {
    const auto& s = this->_internal_piece(i);
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      s.data(), static_cast<int>(s.length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "chess.board.piece");
    target = stream->WriteString(1, s, target);
  }

  // optional int32 turn = 2;
  if (_internal_has_turn()) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteInt32ToArray(2, this->_internal_turn(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:chess.board)
  return target;
}

size_t board::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:chess.board)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated string piece = 1;
  total_size += 1 *
      ::PROTOBUF_NAMESPACE_ID::internal::FromIntSize(piece_.size());
  for (int i = 0, n = piece_.size(); i < n; i++) {
    total_size += ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
      piece_.Get(i));
  }

  // optional int32 turn = 2;
  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000001u) {
    total_size += ::_pbi::WireFormatLite::Int32SizePlusOne(this->_internal_turn());
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData board::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSizeCheck,
    board::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*board::GetClassData() const { return &_class_data_; }

void board::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to,
                      const ::PROTOBUF_NAMESPACE_ID::Message& from) {
  static_cast<board *>(to)->MergeFrom(
      static_cast<const board &>(from));
}


void board::MergeFrom(const board& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:chess.board)
  GOOGLE_DCHECK_NE(&from, this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  piece_.MergeFrom(from.piece_);
  if (from._internal_has_turn()) {
    _internal_set_turn(from._internal_turn());
  }
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void board::CopyFrom(const board& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:chess.board)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool board::IsInitialized() const {
  return true;
}

void board::InternalSwap(board* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  piece_.InternalSwap(&other->piece_);
  swap(turn_, other->turn_);
}

::PROTOBUF_NAMESPACE_ID::Metadata board::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_chess_2eproto_getter, &descriptor_table_chess_2eproto_once,
      file_level_metadata_chess_2eproto[0]);
}

// @@protoc_insertion_point(namespace_scope)
}  // namespace chess
PROTOBUF_NAMESPACE_OPEN
template<> PROTOBUF_NOINLINE ::chess::board*
Arena::CreateMaybeMessage< ::chess::board >(Arena* arena) {
  return Arena::CreateMessageInternal< ::chess::board >(arena);
}
PROTOBUF_NAMESPACE_CLOSE

// @@protoc_insertion_point(global_scope)
#include <google/protobuf/port_undef.inc>
