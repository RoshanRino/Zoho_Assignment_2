// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: chess.proto

#ifndef GOOGLE_PROTOBUF_INCLUDED_chess_2eproto
#define GOOGLE_PROTOBUF_INCLUDED_chess_2eproto

#include <limits>
#include <string>

#include <google/protobuf/port_def.inc>
#if PROTOBUF_VERSION < 3020000
#error This file was generated by a newer version of protoc which is
#error incompatible with your Protocol Buffer headers. Please update
#error your headers.
#endif
#if 3020001 < PROTOBUF_MIN_PROTOC_VERSION
#error This file was generated by an older version of protoc which is
#error incompatible with your Protocol Buffer headers. Please
#error regenerate this file with a newer version of protoc.
#endif

#include <google/protobuf/port_undef.inc>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/arena.h>
#include <google/protobuf/arenastring.h>
#include <google/protobuf/generated_message_util.h>
#include <google/protobuf/metadata_lite.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/message.h>
#include <google/protobuf/repeated_field.h>  // IWYU pragma: export
#include <google/protobuf/extension_set.h>  // IWYU pragma: export
#include <google/protobuf/unknown_field_set.h>
// @@protoc_insertion_point(includes)
#include <google/protobuf/port_def.inc>
#define PROTOBUF_INTERNAL_EXPORT_chess_2eproto
PROTOBUF_NAMESPACE_OPEN
namespace internal {
class AnyMetadata;
}  // namespace internal
PROTOBUF_NAMESPACE_CLOSE

// Internal implementation detail -- do not use these members.
struct TableStruct_chess_2eproto {
  static const uint32_t offsets[];
};
extern const ::PROTOBUF_NAMESPACE_ID::internal::DescriptorTable descriptor_table_chess_2eproto;
namespace chess {
class board;
struct boardDefaultTypeInternal;
extern boardDefaultTypeInternal _board_default_instance_;
}  // namespace chess
PROTOBUF_NAMESPACE_OPEN
template<> ::chess::board* Arena::CreateMaybeMessage<::chess::board>(Arena*);
PROTOBUF_NAMESPACE_CLOSE
namespace chess {

// ===================================================================

class board final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:chess.board) */ {
 public:
  inline board() : board(nullptr) {}
  ~board() override;
  explicit PROTOBUF_CONSTEXPR board(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  board(const board& from);
  board(board&& from) noexcept
    : board() {
    *this = ::std::move(from);
  }

  inline board& operator=(const board& from) {
    CopyFrom(from);
    return *this;
  }
  inline board& operator=(board&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const board& default_instance() {
    return *internal_default_instance();
  }
  static inline const board* internal_default_instance() {
    return reinterpret_cast<const board*>(
               &_board_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    0;

  friend void swap(board& a, board& b) {
    a.Swap(&b);
  }
  inline void Swap(board* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(board* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  board* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<board>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const board& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom(const board& from);
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to, const ::PROTOBUF_NAMESPACE_ID::Message& from);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(board* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "chess.board";
  }
  protected:
  explicit board(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kPieceFieldNumber = 1,
    kTurnFieldNumber = 2,
  };
  // repeated string piece = 1;
  int piece_size() const;
  private:
  int _internal_piece_size() const;
  public:
  void clear_piece();
  const std::string& piece(int index) const;
  std::string* mutable_piece(int index);
  void set_piece(int index, const std::string& value);
  void set_piece(int index, std::string&& value);
  void set_piece(int index, const char* value);
  void set_piece(int index, const char* value, size_t size);
  std::string* add_piece();
  void add_piece(const std::string& value);
  void add_piece(std::string&& value);
  void add_piece(const char* value);
  void add_piece(const char* value, size_t size);
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string>& piece() const;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string>* mutable_piece();
  private:
  const std::string& _internal_piece(int index) const;
  std::string* _internal_add_piece();
  public:

  // optional int32 turn = 2;
  bool has_turn() const;
  private:
  bool _internal_has_turn() const;
  public:
  void clear_turn();
  int32_t turn() const;
  void set_turn(int32_t value);
  private:
  int32_t _internal_turn() const;
  void _internal_set_turn(int32_t value);
  public:

  // @@protoc_insertion_point(class_scope:chess.board)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string> piece_;
  int32_t turn_;
  friend struct ::TableStruct_chess_2eproto;
};
// ===================================================================


// ===================================================================

#ifdef __GNUC__
  #pragma GCC diagnostic push
  #pragma GCC diagnostic ignored "-Wstrict-aliasing"
#endif  // __GNUC__
// board

// repeated string piece = 1;
inline int board::_internal_piece_size() const {
  return piece_.size();
}
inline int board::piece_size() const {
  return _internal_piece_size();
}
inline void board::clear_piece() {
  piece_.Clear();
}
inline std::string* board::add_piece() {
  std::string* _s = _internal_add_piece();
  // @@protoc_insertion_point(field_add_mutable:chess.board.piece)
  return _s;
}
inline const std::string& board::_internal_piece(int index) const {
  return piece_.Get(index);
}
inline const std::string& board::piece(int index) const {
  // @@protoc_insertion_point(field_get:chess.board.piece)
  return _internal_piece(index);
}
inline std::string* board::mutable_piece(int index) {
  // @@protoc_insertion_point(field_mutable:chess.board.piece)
  return piece_.Mutable(index);
}
inline void board::set_piece(int index, const std::string& value) {
  piece_.Mutable(index)->assign(value);
  // @@protoc_insertion_point(field_set:chess.board.piece)
}
inline void board::set_piece(int index, std::string&& value) {
  piece_.Mutable(index)->assign(std::move(value));
  // @@protoc_insertion_point(field_set:chess.board.piece)
}
inline void board::set_piece(int index, const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  piece_.Mutable(index)->assign(value);
  // @@protoc_insertion_point(field_set_char:chess.board.piece)
}
inline void board::set_piece(int index, const char* value, size_t size) {
  piece_.Mutable(index)->assign(
    reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_set_pointer:chess.board.piece)
}
inline std::string* board::_internal_add_piece() {
  return piece_.Add();
}
inline void board::add_piece(const std::string& value) {
  piece_.Add()->assign(value);
  // @@protoc_insertion_point(field_add:chess.board.piece)
}
inline void board::add_piece(std::string&& value) {
  piece_.Add(std::move(value));
  // @@protoc_insertion_point(field_add:chess.board.piece)
}
inline void board::add_piece(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  piece_.Add()->assign(value);
  // @@protoc_insertion_point(field_add_char:chess.board.piece)
}
inline void board::add_piece(const char* value, size_t size) {
  piece_.Add()->assign(reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_add_pointer:chess.board.piece)
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string>&
board::piece() const {
  // @@protoc_insertion_point(field_list:chess.board.piece)
  return piece_;
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string>*
board::mutable_piece() {
  // @@protoc_insertion_point(field_mutable_list:chess.board.piece)
  return &piece_;
}

// optional int32 turn = 2;
inline bool board::_internal_has_turn() const {
  bool value = (_has_bits_[0] & 0x00000001u) != 0;
  return value;
}
inline bool board::has_turn() const {
  return _internal_has_turn();
}
inline void board::clear_turn() {
  turn_ = 0;
  _has_bits_[0] &= ~0x00000001u;
}
inline int32_t board::_internal_turn() const {
  return turn_;
}
inline int32_t board::turn() const {
  // @@protoc_insertion_point(field_get:chess.board.turn)
  return _internal_turn();
}
inline void board::_internal_set_turn(int32_t value) {
  _has_bits_[0] |= 0x00000001u;
  turn_ = value;
}
inline void board::set_turn(int32_t value) {
  _internal_set_turn(value);
  // @@protoc_insertion_point(field_set:chess.board.turn)
}

#ifdef __GNUC__
  #pragma GCC diagnostic pop
#endif  // __GNUC__

// @@protoc_insertion_point(namespace_scope)

}  // namespace chess

// @@protoc_insertion_point(global_scope)

#include <google/protobuf/port_undef.inc>
#endif  // GOOGLE_PROTOBUF_INCLUDED_GOOGLE_PROTOBUF_INCLUDED_chess_2eproto
